#!/usr/bin/env python3


"""
================================================================================
Copyright 2023 - 2024, Jonathan Zrake

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
================================================================================


Purpose: Makefile generator for Vapor-based projects


Scheme:

Projects based on Vapor contains a collection of _programs_. A program refers
to a single .cpp file, designed for a specfic type of calculation. That .cpp
file includes the vapor header files, and should not have any object file
dependancies (yet, this could be relaxed in the future). A given program can
be compiled in any of several _modes_. The currently supported modes are

- dbg: target compiled with -O0 -g -D VAPOR_DEBUG
- cpu: target compiled with -Ofast; cpu (single-core) executor is the default
- omp: target compiled with {omp_flags}; omp executor is default
- gpu: target compiled with nvcc; gpu executor is default

This configure script can be run listing any of the above modes modes after
the --modes flag. One Makefile _target_ is written for each program, and for
each of the requested modes.

For example, the Vapor project contains an examples directory with a source
file called array_demo.cpp. If run with --modes omp gpu, then two targets
will be derived from the array_demo program: array_demo_omp, and
array_demo_gpu. The associated executables are placed in a bin/ directory by
default.


Examples:

./configure
Generates a Makefile with rules to build targets, in dbg, cpu, and omp modes,
for each program

./configure --modes omp gpu
Creates targets in omp and gpu modes

./configure --stdout
Dumps the Makefile to the terminal


Project file:

The configure script looks in the current working directory for a JSON file
called project.json. An example of this file can be found in the Vapor root
directory.


System file:

The configure script optionally loads a JSON file called system.json from the
current directory. Allowed keys include:

- libs: Extra linker arguments which may be needed on a given system
- omp_flags: Equivalent of -fopenmp; defaults to -Xpreprocessor -fopenmp,
  which works on Darwin

================================================================================
"""

header = dict()

header["all"] = r"""
VAPOR_HOME = {vapor}
CXXFLAGS = -std=c++17 -MMD -MP -I$(VAPOR_HOME)/include
CXX_MPI = mpicxx
""".strip()

header["dbg"] = r"""
CXX_DBG = c++
CXXFLAGS_DBG = -D VAPOR_DBG -Wall -O0 -g -D VAPOR_DEBUG
""".strip()

header["cpu"] = r"""
CXX_CPU = c++
CXXFLAGS_CPU = -D VAPOR_CPU -Ofast
""".strip()

header["omp"] = r"""
CXX_OMP = c++
CXXFLAGS_OMP = -D VAPOR_OMP -Ofast {omp_flags}
""".strip()

header["gpu"] = r"""
CXX_GPU = nvcc
CXXFLAGS_GPU = -D VAPOR_GPU -O3 -x cu --extended-lambda -ccbin={nvcc_ccbin}
""".strip()

header["gui"] = r"""
GUI_HOME = {gui}
CXX_GUI = c++
CXXFLAGS_GUI += -D VAPOR_GUI
CXXFLAGS_GUI += -Wall -O3 -ObjC++
CXXFLAGS_GUI += -I$(GUI_HOME)/imgui
CXXFLAGS_GUI += -I$(GUI_HOME)/imgui/backends
CXXFLAGS_GUI += -I$(GUI_HOME)/implot
CXXFLAGS_GUI += -I$(GUI_HOME)/imgui-filebrowser
CXXFLAGS_GUI += $(shell sdl2-config --cflags)
""".strip()


footer = r"""
$(OBJ): | {build}
$(EXE): | {bin}

build:
    @mkdir -p $@
bin:
    @mkdir -p $@
clean:
    $(RM) $(DEP) $(OBJ) $(EXE)

-include $(DEP)
""".replace(
    "    ", "\t"
).strip()


def get_lib(mode, deps=list(), libs=list(), lomp="-lomp", **kwargs):
    lib = [l for l in libs]
    if mode == "omp":
        lib.append(lomp)
    if "hdf5" in deps:
        lib.append("-lhdf5")
    if mode == "gui":
        lib.append("-framework Metal")
        lib.append("-framework Cocoa")
        lib.append("$(shell sdl2-config --libs)")
    return " ".join(lib)


def get_cxx(mode, deps=list(), **kwargs):
    if "mpi" in deps:
        return "mpi"
    else:
        return mode


def get_extra_sources(mode):
    if mode == "gui":
        return [
            "$(GUI_HOME)/imgui/backends/imgui_impl_metal.mm",
            "$(GUI_HOME)/imgui/backends/imgui_impl_sdl2.cpp",
            "$(GUI_HOME)/imgui/imgui.cpp",
            "$(GUI_HOME)/imgui/imgui_demo.cpp",
            "$(GUI_HOME)/imgui/imgui_draw.cpp",
            "$(GUI_HOME)/imgui/imgui_tables.cpp",
            "$(GUI_HOME)/imgui/imgui_widgets.cpp",
            "$(GUI_HOME)/implot/implot.cpp",
            "$(GUI_HOME)/implot/implot_demo.cpp",
            "$(GUI_HOME)/implot/implot_items.cpp",
        ]
    else:
        return list()


def skip_target(prog, mode, project):
    return mode in project["programs"][prog].get("skip", list())


def main():
    import sys
    import json
    import argparse
    import io
    import pathlib

    system = {
        "modes": ["dbg", "cpu"],
        "libs": [],
        "omp_flags": "-Xpreprocessor -fopenmp",
        "lomp": "-lomp",
        "nvcc_ccbin": "c++",
    }
    project = {
        "src": "src",
        "bin": "bin",
        "build": "build",
        "vapor": "vapor",
        "gui": "gui",
        "programs": {},
    }

    try:
        system.update(json.load(open("system.json")))
    except FileNotFoundError as e:
        pass

    try:
        project.update(json.load(open("project.json")))
    except FileNotFoundError:
        print("project.json file not found in current directory")
        exit()

    parser = argparse.ArgumentParser()
    parser.add_argument("--enable-cuda", action="store_true")
    parser.add_argument("--stdout", action="store_true")
    args = parser.parse_args()

    if args.enable_cuda and "gpu" not in system["modes"]:
        system["modes"].append("gpu")

    modes = system["modes"]
    vapor = project["vapor"]
    src = project["src"]
    bin = project["bin"]
    build = project["build"]
    programs = project["programs"].keys()

    def open_output():
        if args.stdout:
            return io.StringIO()
        else:
            return open("Makefile", "w")

    with open_output() as f:
        f.write(header["all"].format(**project, **system))
        f.write("\n")     
        for mode in modes:
            f.write(header[mode].format(**project, **system))
            f.write("\n")     
        f.write("\n")
        for mode in modes:
            for prog in programs:
                if skip_target(prog, mode, project):
                    continue
                f.write(f"EXE_{mode.upper()} += {bin}/{prog}_{mode}\n")
                f.write(f"DEP_{mode.upper()} += {build}/{prog}_{mode}.d\n")
                f.write(f"OBJ_{prog.upper()}_{mode.upper()} += {build}/{prog}_{mode}.o\n")
                for c in map(pathlib.Path, get_extra_sources(mode)):
                    o = c.with_suffix(".o").name
                    d = c.with_suffix(".d").name
                    f.write(f"OBJ_{prog.upper()}_{mode.upper()} += {build}/{o}\n")
                    f.write(f"DEP_{prog.upper()}_{mode.upper()} += {build}/{d}\n")
        f.write("\n")
        for mode in modes:
            f.write(f"EXE += $(EXE_{mode.upper()})")
            f.write("\n")
        for mode in modes:
            f.write(f"DEP += $(DEP_{mode.upper()})")
            f.write("\n")
        for mode in modes:
            for prog in programs:
                f.write(f"OBJ += $(OBJ_{prog.upper()}_{mode.upper()})")
                f.write("\n")
        f.write("\n")
        for mode in modes:
            f.write(f"{mode}: $(EXE_{mode.upper()})")
            f.write("\n")
        f.write(f"all: " + " ".join(modes))
        f.write("\n")
        f.write("\n")
        for prog in programs:
            f.write(f"{prog}: " + " ".join(f"{bin}/{prog}_{mode}" for mode in modes))
            f.write("\n")
        f.write("\n")
        for prog in programs:
            for mode in modes:
                if skip_target(prog, mode, project):
                    continue
                lib = get_lib(
                    mode,
                    **project["programs"][prog],
                    libs=system["libs"],
                    lomp=system["lomp"],
                )
                cxx = get_cxx(mode, **project["programs"][prog])
                f.write(f"{bin}/{prog}_{mode}: $(OBJ_{prog.upper()}_{mode.upper()})")
                f.write("\n")
                f.write(f"\t$(CXX_{cxx.upper()}) -o $@ $^ {lib}")
                f.write("\n")
                f.write(f"{build}/{prog}_{mode}.o: {src}/{prog}.cpp")
                f.write("\n")
                f.write(
                    f"\t$(CXX_{cxx.upper()}) -o $@ $< $(CXXFLAGS) $(CXXFLAGS_{mode.upper()}) -c"
                )
                f.write("\n")
            f.write("\n")
        for mode in modes: # extra sources are per-mode, not per-program
            for c in map(pathlib.Path, get_extra_sources(mode)):
                o = c.with_suffix(".o").name
                f.write(f"{build}/{o}: {c}\n")
                f.write(
                    f"\t$(CXX_{cxx.upper()}) -o $@ $< $(CXXFLAGS) $(CXXFLAGS_{mode.upper()}) -c"
                )
                f.write("\n")
        f.write("\n")
        f.write(footer.format(**project))
        f.write("\n")
        if args.stdout:
            print(f.getvalue())


if __name__ == "__main__":
    main()
